import { ref } from 'vue'
import { useGeometry } from './useGeometry'

export function useInteraction() {
  const { 
    isPointOnSide, 
    isPointInside, 
    getSideNames, 
    getAdjacentElements, 
    getOppositeElement,
    getShapeInfo 
  } = useGeometry()
  
  const currentHighlight = ref(null)
  const infoText = ref('')
  
  const handleCanvasClick = (event, vertices, shapeType) => {
    const rect = event.target.getBoundingClientRect()
    const x = event.clientX - rect.left
    const y = event.clientY - rect.top
    
    // Check vertex click
    for (let i = 0; i < vertices.length; i++) {
      const vertex = vertices[i]
      const distance = Math.sqrt((x - vertex.x) ** 2 + (y - vertex.y) ** 2)
      if (distance < 15) {
        showVertexInfo(i, vertices)
        return
      }
    }
    
    // Check side click
    for (let i = 0; i < 4; i++) {
      if (isPointOnSide(x, y, i, vertices)) {
        showSideInfo(i)
        return
      }
    }
    
    // Check if inside quadrilateral
    if (isPointInside(x, y, vertices)) {
      showGeneralInfo(shapeType)
      return
    }
    
    // Click outside - show diagonals
    showDiagonalInfo()
  }
  
  const showVertexInfo = (index, vertices) => {
    const vertex = vertices[index]
    const adjacent = getAdjacentElements(index).map(i => vertices[i].label)
    const opposite = vertices[getOppositeElement(index)].label
    
    currentHighlight.value = { type: 'vertex', index }
    infoText.value = `
      <strong>–í–µ—Ä—à–∏–Ω–∞ ${vertex.label}</strong><br>
      üìç <span style="color: #ff8c42">–°—É—Å—ñ–¥–Ω—ñ –≤–µ—Ä—à–∏–Ω–∏:</span> ${adjacent.join(', ')}<br>
      üìç <span style="color: #a8e6cf">–ü—Ä–æ—Ç–∏–ª–µ–∂–Ω–∞ –≤–µ—Ä—à–∏–Ω–∞:</span> ${opposite}<br>
      üìù –í–µ—Ä—à–∏–Ω–∞ - —Ü–µ —Ç–æ—á–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–≤–æ—Ö —Å—Ç–æ—Ä—ñ–Ω
    `
  }
  
  const showSideInfo = (index) => {
    const sideNames = getSideNames()
    const currentSide = sideNames[index]
    const adjacent = getAdjacentElements(index).map(i => sideNames[i])
    const opposite = sideNames[getOppositeElement(index)]
    
    currentHighlight.value = { type: 'side', index }
    infoText.value = `
      <strong>–°—Ç–æ—Ä–æ–Ω–∞ ${currentSide}</strong><br>
      üìè <span style="color: #ff8c42">–°—É—Å—ñ–¥–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏:</span> ${adjacent.join(', ')}<br>
      üìè <span style="color: #a8e6cf">–ü—Ä–æ—Ç–∏–ª–µ–∂–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞:</span> ${opposite}<br>
      üìù –°—É—Å—ñ–¥–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏ –º–∞—é—Ç—å —Å–ø—ñ–ª—å–Ω—É –≤–µ—Ä—à–∏–Ω—É
    `
  }
  
  const showDiagonalInfo = () => {
    currentHighlight.value = { type: 'diagonal' }
    infoText.value = `
      <strong>–î—ñ–∞–≥–æ–Ω–∞–ª—ñ —á–æ—Ç–∏—Ä–∏–∫—É—Ç–Ω–∏–∫–∞</strong><br>
      ‚ÜóÔ∏è <span style="color: #ffe66d">–î—ñ–∞–≥–æ–Ω–∞–ª—å AC:</span> –∑'—î–¥–Ω—É—î –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω—ñ –≤–µ—Ä—à–∏–Ω–∏ A —ñ C<br>
      ‚ÜôÔ∏è <span style="color: #ffe66d">–î—ñ–∞–≥–æ–Ω–∞–ª—å BD:</span> –∑'—î–¥–Ω—É—î –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω—ñ –≤–µ—Ä—à–∏–Ω–∏ B —ñ D<br>
      üìù –î—ñ–∞–≥–æ–Ω–∞–ª—å - –≤—ñ–¥—Ä—ñ–∑–æ–∫ –º—ñ–∂ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–º–∏ –≤–µ—Ä—à–∏–Ω–∞–º–∏
    `
  }
  
  const showGeneralInfo = (shapeType) => {
    currentHighlight.value = { type: 'all-sides' }
    infoText.value = `
      <strong>${getShapeInfo(shapeType)}</strong><br>
      üî∑ <span style="color: #4ecdc4">–°—Ç–æ—Ä–æ–Ω–∏:</span> AB, BC, CD, DA<br>
      üî¥ <span style="color: #ff6b6b">–í–µ—Ä—à–∏–Ω–∏:</span> A, B, C, D<br>
      üìù –ß–æ—Ç–∏—Ä–∏–∫—É—Ç–Ω–∏–∫ –º–∞—î 4 –≤–µ—Ä—à–∏–Ω–∏, 4 —Å—Ç–æ—Ä–æ–Ω–∏ —ñ 2 –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ
    `
  }
  
  const resetInteraction = () => {
    currentHighlight.value = null
    infoText.value = '–ö–ª—ñ–∫–Ω—ñ—Ç—å –Ω–∞ —Ñ—ñ–≥—É—Ä—É –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è —ó—ó –µ–ª–µ–º–µ–Ω—Ç—ñ–≤'
  }
  
  return {
    currentHighlight,
    infoText,
    handleCanvasClick,
    showVertexInfo,
    showSideInfo,
    showDiagonalInfo,
    showGeneralInfo,
    resetInteraction
  }
}